// Updated imports
import { useState, useRef, useCallback } from "react";
import { Wand2, Mic, Layers } from "lucide-react";
import { useMutation, useQuery } from "@tanstack/react-query";
import { useToast } from "@/components/ui/use-toast";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";

// Constants
const NATIONAL_ANTHEM_TEXT = "Oh say can you see, by the dawn's early light...";

const genreOptions = [
  { value: "pop", label: "Pop" },
  { value: "rock", label: "Rock" },
  { value: "hiphop", label: "Hip Hop" },
  { value: "classical", label: "Classical" }
];

const styleOptions = [
  { value: "smooth", label: "Smooth" },
  { value: "raw", label: "Raw" },
  { value: "energetic", label: "Energetic" },
  { value: "mellow", label: "Mellow" }
];

interface VoiceSample {
  id: number;
  name: string;
  audioUrl: string;
  isPublic: boolean;
}

interface VoiceCloningProps {
  userId: number;
}

export default function VoiceCloning({ userId }: VoiceCloningProps) {
  const [selectedVoiceSample, setSelectedVoiceSample] = useState<number | null>(null);
  const [voiceName, setVoiceName] = useState<string>("");
  const [makePublic, setMakePublic] = useState<boolean>(false);
  const [genre, setGenre] = useState<string>("pop");
  const [style, setStyle] = useState<string>("smooth");
  const [recordedBlob, setRecordedBlob] = useState<Blob | null>(null);
  const [isRecording, setIsRecording] = useState(false);
  const [clonedVoice, setClonedVoice] = useState<{sampleUrl: string, anthemUrl: string} | null>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const { toast } = useToast();

  // Fetch available voices
  const { data: availableVoices, refetch: refetchVoices } = useQuery<VoiceSample[]>({
    queryKey: ['voices'],
    queryFn: async () => {
      const response = await fetch('/api/voice-cloning/voices', {
        credentials: 'include'
      });
      if (!response.ok) throw new Error('Failed to fetch voices');
      return response.json();
    }
  });

  // Enhanced recording functions
  const startRecording = useCallback(async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });
      mediaRecorderRef.current = mediaRecorder;

      const chunks: BlobPart[] = [];
      mediaRecorder.ondataavailable = (event) => {
        chunks.push(event.data);
      };

      mediaRecorder.onstop = async () => {
        try {
          const blob = new Blob(chunks, { type: "audio/webm" });
          setRecordedBlob(blob);
          setSelectedVoiceSample(null);
        } catch (error) {
          toast({
            title: "Recording Processing Failed",
            description: "Could not process the recording",
            variant: "destructive"
          });
        } finally {
          stream.getTracks().forEach(track => track.stop());
          setIsRecording(false);
        }
      };

      mediaRecorder.start(100);
      setIsRecording(true);
    } catch (error) {
      toast({
        title: "Recording Failed",
        description: "Microphone access denied or unavailable",
        variant: "destructive"
      });
    }
  }, [toast]);

  const stopRecording = useCallback(() => {
    if (mediaRecorderRef.current?.state === "recording") {
      mediaRecorderRef.current.stop();
    }
  }, []);

  // Voice cloning mutation updated to match endpoint
  const voiceCloningMutation = useMutation({
    mutationFn: async () => {
      if (!selectedVoiceSample && !recordedBlob) {
        throw new Error("Please select a voice sample or record a new one");
      }

      const formData = new FormData();
      formData.append("audio", recordedBlob || '');
      formData.append("name", voiceName || `My Voice ${new Date().toLocaleString()}`);
      formData.append("makePublic", makePublic.toString());
      formData.append("sampleText", NATIONAL_ANTHEM_TEXT);

      if (selectedVoiceSample) {
        const sample = availableVoices?.find(s => s.id === selectedVoiceSample);
        if (!sample) throw new Error("Selected voice sample not found");
        formData.append("audio", sample.audioUrl);
      }

      const response = await fetch('/api/voice-cloning/clone', {
        method: "POST",
        body: formData,
        credentials: "include"
      });

      if (!response.ok) {
        const error = await response.json().catch(() => ({}));
        throw new Error(error.message || "Voice cloning failed");
      }

      const result = await response.json();
      await refetchVoices(); // Refresh available voices after cloning
      return result;
    },
    onSuccess: (voiceData) => {
      setClonedVoice({
        sampleUrl: voiceData.sampleUrl,
        anthemUrl: voiceData.anthemUrl
      });
      toast({
        title: "Voice Cloned Successfully",
        description: "Your custom voice and anthem sample are ready!",
        icon: <Wand2 className="text-spotify-green" />
      });
    },
    onError: (error) => {
      toast({
        title: "Voice Cloning Failed",
        description: error instanceof Error ? error.message : "Unknown error",
        variant: "destructive"
      });
    }
  });

  return (
    <Card className="bg-dark-card border-gray-800 mt-6">
      <CardHeader>
        <CardTitle className="text-lg font-poppins font-semibold text-white">
          Voice Cloning for Song Generation
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Voice Sample Selection */}
          <div>
            <label className="text-sm font-medium text-gray-300 mb-2 block">
              Select Existing Voice Sample
            </label>
            <Select 
              value={selectedVoiceSample?.toString() || ""}
              onValueChange={(value) => {
                setSelectedVoiceSample(Number(value));
                setRecordedBlob(null);
              }}
            >
              <SelectTrigger className="bg-gray-800 border-gray-600">
                <SelectValue placeholder="Select a voice sample" />
              </SelectTrigger>
              <SelectContent>
                {availableVoices?.map((sample) => (
                  <SelectItem key={sample.id} value={sample.id.toString()}>
                    {sample.name} {sample.isPublic && "(Public)"}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Voice Name Input */}
          <div>
            <label className="text-sm font-medium text-gray-300 mb-2 block">
              Voice Name
            </label>
            <input
              type="text"
              value={voiceName}
              onChange={(e) => setVoiceName(e.target.value)}
              placeholder="Enter a name for your voice"
              className="flex h-10 w-full rounded-md border border-gray-600 bg-gray-800 px-3 py-2 text-sm text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-spotify-green focus:ring-offset-2 focus:ring-offset-gray-900"
            />
          </div>

          {/* Public Toggle */}
          <div className="flex items-center space-x-2">
            <Switch 
              id="make-public" 
              checked={makePublic}
              onCheckedChange={setMakePublic}
            />
            <Label htmlFor="make-public" className="text-gray-300">
              Make this voice public
            </Label>
          </div>

          {/* Genre and Style Selection */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium text-gray-300 mb-2 block">
                Genre
              </label>
              <Select value={genre} onValueChange={setGenre}>
                <SelectTrigger className="bg-gray-800 border-gray-600">
                <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {genreOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-300 mb-2 block">
                Style
              </label>
              <Select value={style} onValueChange={setStyle}>
                <SelectTrigger className="bg-gray-800 border-gray-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {styleOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Recording Interface */}
          <div>
            <label className="text-sm font-medium text-gray-300 mb-2 block">
              Record New Voice Sample
            </label>
            <div className="flex items-center space-x-4">
              <Button
                onClick={isRecording ? stopRecording : startRecording}
                className={`w-16 h-16 rounded-full ${
                  isRecording ? 'bg-red-500 hover:bg-red-600' : 'bg-vibrant-orange hover:bg-orange-600'
                }`}
              >
                {isRecording ? (
                  <Layers className="w-6 h-6" />
                ) : (
                  <Mic className="w-6 h-6" />
                )}
              </Button>
              <Button
                onClick={() => voiceCloningMutation.mutate()}
                disabled={voiceCloningMutation.isLoading || (!selectedVoiceSample && !recordedBlob)}
                className="bg-spotify-green hover:bg-green-600"
              >
                <Wand2 className="w-4 h-4 mr-2" />
                {voiceCloningMutation.isLoading ? "Cloning..." : "Clone Voice"}
              </Button>
            </div>
          </div>

          {/* Recorded Blob Preview */}
          {recordedBlob && (
            <div className="mt-4">
              <p className="text-sm text-gray-400 mb-2">Your Recording:</p>
              <audio controls src={URL.createObjectURL(recordedBlob)} className="w-full" />
            </div>
          )}

          {/* Cloned Voice Previews */}
          {clonedVoice && (
            <div className="mt-4 space-y-4">
              <div>
                <p className="text-sm text-gray-400 mb-2">Cloned Voice Sample:</p>
                <audio controls src={clonedVoice.sampleUrl} className="w-full" />
              </div>
              <div>
                <p className="text-sm text-gray-400 mb-2">National Anthem Demo (10-15s):</p>
                <audio controls src={clonedVoice.anthemUrl} className="w-full" />
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
